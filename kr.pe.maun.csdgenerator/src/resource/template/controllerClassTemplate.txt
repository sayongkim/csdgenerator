package [packagePath];

import java.util.HashMap;
import java.util.List;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.multipart.MultipartHttpServletRequest;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class [capitalizePrefix]Controller {

	private static final Logger logger = LogManager.getLogger([capitalizePrefix]Controller.class);

	@Autowired
	private [capitalizePrefix]Service [prefix]Service;

	/**
	 * Desc : 목록 조회
	 * @Method : select[prefix]List
	 * @Company : [company]
	 * @Author : [author]
	 * @Date : [date]
	 * @return
	 */
	@RequestMapping(value="/[prefix]/list", method=RequestMethod.GET)
	public ModelAndView select[capitalizePrefix]List() {

		ModelAndView modelAndView = new ModelAndView("[prefix]/[prefix]");

		return modelAndView;
	}

	/**
	 * Desc : 목록 (Ajax)
	 * @Method : select[prefix]ListData
	 * @Company : [company]
	 * @Author : [author]
	 * @Date : [date]
	 * @return
	 */
	@RequestMapping(value="/[prefix]/list/data", method=RequestMethod.GET)
	@ResponseBody
	public HashMap<String, Object> select[capitalizePrefix]ListData(@ModelAttribute [searchParamType] [searchParamName]) {

		HashMap<String, Object> resultMap = new HashMap<String, Object>();

		long totalCnt = [prefix]Service.select[capitalizePrefix]TotalCnt([searchParamName]);
		resultMap.put("total", totalCnt);

		List<[returnType]> [prefix]List = [prefix]Service.select[capitalizePrefix]List([searchParamName]);

		resultMap.put("data", [prefix]List);

		return resultMap;
	}

	/**
	 * Desc : 상세
	 * @Method : select[prefix]
	 * @Company : [company]
	 * @Author : [author]
	 * @Date : [date]
	 * @return
	 */
	@RequestMapping(value="/[prefix]", method=RequestMethod.GET)
	public ModelAndView select[capitalizePrefix](@ModelAttribute [searchParamType] [searchParamName]) {

		ModelAndView modelAndView = new ModelAndView("[prefix]/[prefix]View");

		[returnType] [prefix] = [prefix]Service.select[capitalizePrefix]([searchParamName]);
		modelAndView.addObject("[prefix]", [prefix]);

		return modelAndView;
	}

	/**
	 * Desc : 등록
	 * @Method : insert[prefix]
	 * @Company : [company]
	 * @Author : [author]
	 * @Date : [date]
	 * @return
	 */
	@RequestMapping(value="/[prefix]/post", method=RequestMethod.GET)
	public ModelAndView insert[capitalizePrefix]() {

		ModelAndView modelAndView = new ModelAndView("[prefix]/[prefix]Post");

		return modelAndView;
	}

	/**
	 * Desc : 등록 처리
	 * @Method : insert[prefix]
	 * @Company : [company]
	 * @Author : [author]
	 * @Date : [date]
	 * @return
	 */
	@RequestMapping(value="/[prefix]/post", method=RequestMethod.POST)
	public ModelAndView insert[capitalizePrefix](MultipartHttpServletRequest request,
			@ModelAttribute [paramType] [paramName]) {

		ModelAndView modelAndView = new ModelAndView("common/replace");

		[prefix]Service.insert[capitalizePrefix]([paramName]);

		modelAndView.addObject("message", "처리되었습니다.");
		modelAndView.addObject("target", request.getContextPath() + "/[prefix]/post/?no_seq=" + [paramName].getNoSeq());

		return modelAndView;
	}

	/**
	 * Desc : 수정
	 * @Method : update[prefix]
	 * @Company : [company]
	 * @Author : [author]
	 * @Date : [date]
	 * @return
	 */
	@RequestMapping(value="/[prefix]/update", method=RequestMethod.GET)
	public ModelAndView update[capitalizePrefix](@ModelAttribute [searchParamType] [searchParamName]) {

		ModelAndView modelAndView = new ModelAndView("[prefix]/[prefix]Post");

		[returnType] [prefix] = [prefix]Service.select[capitalizePrefix]([searchParamName]);
		modelAndView.addObject("[prefix]", [prefix]);

		return modelAndView;
	}

	/**
	 * Desc : 수정 처리
	 * @Method : [prefix]Post
	 * @Company : [company]
	 * @Author : [author]
	 * @Date : [date]
	 * @return
	 */
	@RequestMapping(value="/[prefix]/update", method=RequestMethod.POST)
	public ModelAndView update[capitalizePrefix](MultipartHttpServletRequest request,
			 @ModelAttribute [paramType] [paramName]) {

		ModelAndView modelAndView = new ModelAndView("common/replace");

		[prefix]Service.update[capitalizePrefix]([paramName]);

		/*r:s*/
		[paramName].get[column](); // [comment]
		/*r:e*/

		modelAndView.addObject("message", "처리되었습니다.");
		modelAndView.addObject("target", request.getContextPath() + "/[prefix]/post?no_seq=" + [paramName].getNoSeq());

		return modelAndView;
	}

	/**
	 * Desc : 삭제 처리
	 * @Method : delete[prefix]
	 * @Company : [company]
	 * @Author : [author]
	 * @Date : [date]
	 * @return
	 */
	@RequestMapping(value="/[prefix]/delete", method=RequestMethod.POST)
	public ModelAndView delete[capitalizePrefix](MultipartHttpServletRequest request,
			@ModelAttribute [searchParamType] [searchParamName]) {

		ModelAndView modelAndView = new ModelAndView("common/replace");

		[prefix]Service.update[capitalizePrefix]([searchParamName]);

		modelAndView.addObject("message", "삭되었습니다.");
		modelAndView.addObject("target", request.getContextPath() + "/[prefix]/post?no_seq=" + [searchParamName].getNoSeq());

		return modelAndView;
	}
}

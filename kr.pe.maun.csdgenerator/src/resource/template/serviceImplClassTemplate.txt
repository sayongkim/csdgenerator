package [packagePath];

import java.util.HashMap;
import java.util.List;

import javax.annotation.Resource;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Isolation;
import org.springframework.transaction.annotation.Propagation;
import org.springframework.transaction.annotation.Transactional;

import [serviceFullPath];
import [daoFullPath];

@Service
public class [capitalizePrefix]ServiceImpl implements [capitalizePrefix]Service {

	private static final Logger logger = LogManager.getLogger([capitalizePrefix]ServiceImpl.class);

	@Resource
	private [capitalizePrefix]Dao [lowerPrefix]Dao;

	/**
	 * 총 건수 조회
	 * @Method : select[capitalizePrefix]TotalCnt
	 * @Company : [company]
	 * @Author : [author]
	 * @Date : [date]
	 * @param searchMap
	 * @return
	 */
	@Transactional(readOnly=true, propagation=Propagation.SUPPORTS, transactionManager="transactionManager")
	@Override
	public int select[capitalizePrefix]TotalCnt(HashMap<String, Object> searchMap) {
		return [lowerPrefix]Dao.select[capitalizePrefix]TotalCnt(searchMap);
	}

	/**
	 * 목록 조회
	 * @Method : [lowerPrefix]Post
	 * @Company : [company]
	 * @Author : [author]
	 * @Date : [date]
	 * @param searchMap
	 * @return
	 */
	@Transactional(readOnly=true, propagation=Propagation.SUPPORTS, transactionManager="transactionManager")
	@Override
	public List<HashMap<String, String>> select[capitalizePrefix]List(HashMap<String, Object> searchMap) {
		return [lowerPrefix]Dao.select[capitalizePrefix]List(searchMap);
	}

	/**
	 * 조회
	 * @Method : [lowerPrefix]Post
	 * @Company : [company]
	 * @Author : [author]
	 * @Date : [date]
	 * @param searchMap
	 * @return
	 */
	@Transactional(readOnly=true, propagation=Propagation.SUPPORTS, transactionManager="transactionManager")
	@Override
	public HashMap<String, String> select[capitalizePrefix](HashMap<String, Object> searchMap) {
		return [lowerPrefix]Dao.select[capitalizePrefix](searchMap);
	}

	/**
	 * 등록
	 * @Method : [lowerPrefix]Post
	 * @Company : [company]
	 * @Author : [author]
	 * @Date : [date]
	 * @param requestMap
	 * @return
	 */
	@Transactional(propagation = Propagation.REQUIRED, isolation=Isolation.DEFAULT, transactionManager="transactionManager")
	@Override
	public int insert[capitalizePrefix](HashMap<String, Object> requestMap) {
		return [lowerPrefix]Dao.insert[capitalizePrefix](requestMap);
	}

	/**
	 * 수정
	 * @Method : [lowerPrefix]Post
	 * @Company : [company]
	 * @Author : [author]
	 * @Date : [date]
	 * @param requestMap
	 * @return
	 */
	@Transactional(propagation = Propagation.REQUIRED, isolation=Isolation.DEFAULT, transactionManager="transactionManager")
	@Override
	public int update[capitalizePrefix](HashMap<String, Object> requestMap) {
		return [lowerPrefix]Dao.update[capitalizePrefix](requestMap);
	}

}
